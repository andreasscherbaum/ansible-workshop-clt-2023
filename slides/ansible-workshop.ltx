\documentclass[ngerman]{beamer}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[ngerman]{babel}
\usepackage{microtype}
\usepackage{csquotes}
\usepackage[type1,ttscale=.875]{libertine}
\usepackage{inconsolata}
\usepackage{fixltx2e}
\usepackage{listings}
\lstset{basicstyle=\footnotesize\ttfamily,breaklines=true}
\usepackage{tikz}
\usepackage[normalem]{ulem}
\usetikzlibrary{trees}


\usetheme{JuanLesPins}
\usecolortheme{beaver}
\usefonttheme{professionalfonts}

\begin{document}
\title{Advanced Ansible Workshop}
\author{Jens Kubieziel, Andreas Scherbaum}
\date{12.\,März~2023}

\begin{frame}
  \maketitle{}
\end{frame}




\begin{frame}[plain,noframenumbering]
  \frametitle{Agenda}
  \tableofcontents
\end{frame}


\section{Einleitung}

\begin{frame}
  \frametitle{Organisatorisches}
\begin{itemize}
\item Geplante Dauer: 3~Stunden
\item Nach einer kurzen Einführung gibt es Übungen.
\item Wir stellen euch AWS-Instanzen zur Verfügung.
\end{itemize}
\pause{}

Ziel: Betrieb einer kleinen PHP"=Anwendung mit  Web- und Datenbankserver
verwaltet über Ansible
\end{frame}

\begin{frame}
  \frametitle{Wir}
  \framesubtitle{Kurze Vorstellung}
  \begin{itemize}
  \item Jens Kubieziel
  \item Andreas Scherbaum
  \end{itemize}
\end{frame}


\begin{frame}
  \frametitle{Wir}
  \framesubtitle{Kurze Vorstellung -- Jens Kubieziel}
  \begin{itemize}
  \item Arbeitet für OctoPi.Consulting im Schwerpunkt Datenschutz und
    Informationssicherheit
  \item Ehrenamtlich für Projekte aus dem Tor"=Umfeld und im Hackspace Jena
    e.\,V.
  \item erreichbar über
    \href{https://kubieziel.de/blog/archives/1685-Kommunikationswerkzeuge-im-Jahr-2022.html}{verschiedene
      Wege}:
    \url{https://kubieziel.de/blog/archives/1685-Kommunikationswerkzeuge-im-Jahr-2022.html};
    am liebsten per Matrix: \texttt{@qbi:matrix.kraut.space}
  \end{itemize}
\end{frame}


\begin{frame}
  \frametitle{Wir}
  \framesubtitle{Kurze Vorstellung -- Andreas Scherbaum}
  \begin{itemize}
  \item Arbeitet für Adjust GmbH
  \item Arbeitet mit vielen PostgreSQL Datenbanken
  \item Board of Directors: PostgreSQL Europe
  \item Organisiert eine Reihe Konferenzen: pgconf.de, pgconf.eu, FOSDEM PGDay
  \item Blog: \url{https://andreas.scherbaum.la/}
  \end{itemize}
\end{frame}


\AtBeginSection{
    \begin{frame}[plain,noframenumbering]
        \frametitle{Agenda}
        \tableofcontents[currentsection]
    \end{frame}
}


\section{Einführung in Ansible und in den Workshop}

\begin{frame}
  \frametitle{Warum Ansible?}
  \begin{columns}
    \begin{column}{.5\textwidth}
      \includegraphics[width=\textwidth]{clt17-ansible}
    \end{column}
    \begin{column}{.5\textwidth}  
      \includegraphics[width=\textwidth]{clt17-ansible2}
    \end{column}
  \end{columns}
\end{frame}

\begin{frame}
  \frametitle{Was ist Ansible?}
  \framesubtitle{Details}
  \begin{itemize}
  \item<+-> leichtgewichtiges Werkzeug zur Automatisierung von Administrationsaufgaben
  \item<+-> Freie Software
  \item<+-> in Python entwickelt
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Wie funktioniert Ansible?}
  Ihr beschreibt den gewünschten Zustand der Zielsysteme. Ansible loggt sich per
  SSH ein und führt ggf. notwendige Aktionen aus.
\end{frame}

\begin{frame}
  \frametitle{Wie funktioniert Ansible?}
  \framesubtitle{Voraussetzungen}
  \begin{itemize}
  \item SSH
  \item Python (Version 2.6 bzw. Python~3)
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Wie installiere ich Ansible?}
  \begin{itemize}
  \item<+-> Über die Paketverwaltung deines GNU/Linux"=Systems:
    \begin{itemize}
    \item \texttt{apt install ansible}
    \item Unter Ubuntu gibt es ein PPA: \texttt{apt-add-repository
        ppa:ansible/ansible}
    \item \texttt{yum install ansible} (ggf. das EPEL"=Repository aktivieren)
    \item \texttt{emerge -av app-admin/ansible}
    \end{itemize}
  \item<+-> Aus den Quellen:
    \begin{itemize}
      
    \item \texttt{pip install ansible}
    \item \texttt{tar.gz} von \url{https://github.com/ansible/ansible/releases}
    \end{itemize}
  \end{itemize}
\end{frame}

\section{Erste Schritte mit Ansible}

\begin{frame}[fragile]
  \frametitle{Unser Repository}
  Für den Workshop haben wir ein Repository vorbereitet:
  \begin{center}
    \url{https://github.com/andreasscherbaum/ansible-workshop-clt-2023}
  \end{center}
  \pause{}

  
  Bitte clont dieses:
  \begin{center}
    \texttt{git clone
      https://github.com/andreasscherbaum/\\ ansible-workshop-clt-2023.git}
  \end{center}\pause{}

  Die Übungen befinden sich im Unterverzeichnis \texttt{uebungen/}.
\end{frame}

\subsection{Vorarbeiten}

\begin{frame}
  \frametitle{Vorarbeiten}
  Mit den folgenden Übungen sollen die Maschinen in eine Art Anfangszustand
  versetzt werden.
  \begin{description}
  \item[Übung 1] Könnt ihr euch überhaupt einloggen?
  \item[Übung 2] Funktionieren Ad-Hoc-Befehle?
  \item[Übung 3] Web- und Datenbankserver installieren und konfigurieren.
  \end{description}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Übung 1}
  Bevor wir mit Ansible loslegen, wollen wir wissen, ob ihr euch auf den
  Maschinen einloggen könnt.

  \begin{exampleblock}{}
    Führt die Übung~1 im Verzeichnis \texttt{uebungen/01-ssh} aus.
  \end{exampleblock}
\end{frame}

\begin{frame}
  \frametitle{Übung 2}
  Mit dem ersten Ansible"=Kommando wollen wir die Maschinen
  anpingen. Bekommt ihr alle Kontakt zu den Maschinen?
\end{frame}

\begin{frame}[fragile]
  \frametitle{Ad-Hoc-Modus zur Erinnerung}
  Mit dem Aufruf von Ansible auf der Kommandozeile lassen sich verschiedene
  Befehle mitgeben. Diese landen eventuell in der Shellhistory, sind aber
  ansonsten nirgendwo hinterlegt. Diese Art von Aufruf wird als
  \emph{Ad-Hoc-Modus} bezeichnet.
  \pause{}
  
  Der Aufruf enthält die betreffenden Hosts sowie Optionen:
  \begin{description}
  \item[\texttt{-i}] bezeichnet den Ort des Inventorys
  \item[\texttt{-m}] Modul, welches ausgeführt werden soll (z. B. shell)
  \item[\texttt{-a}] Argumente zum obigen Modul bzw. Shell"=Kommando (\texttt{command}"=Modul)
  \item[\texttt{-u}] Benutzername (Standard: aktueller Benutzername)
  \item[\texttt{-b}] Aktionen werden mit den Rechten des angegebenen Benutzers ausgeführt
  \end{description}
  \pause{}
  
  \begin{exampleblock}{Hello World}
    \texttt{ansible all -i hosts -a '/bin/echo Hello World'}
  \end{exampleblock}
\end{frame}

\begin{frame}
  \frametitle{Übung 2}
  Für Ansible gibt es das Modul ping, welches einen oder mehrere Hosts
  kontaktiert und das Ergebnis zurückmeldet.
  
  \begin{exampleblock}{}
    Führt die Übung~2 im Verzeichnis \texttt{uebungen/02-ping} aus.
  \end{exampleblock}
\end{frame}

\begin{frame}
  \frametitle{Übung 3}
  Nun werden Web- und Datenbankserver installiert und konfiguriert. Diese Übung
  schließt an die Workshops der Vorjahre an und nutzt dies als
  Anfangszustand.\pause{}

  Ihr bekommt eine Ausgabe der Form:
  \begin{quote}
    Die URL lautet: http://xxx.xxx.xxx.xxx/index.php
  \end{quote}
  Damit könnt ihr eine kleine Infoseite sehen.
\end{frame}


\section{Inventory und Variablen}

\begin{frame}[fragile]
  \frametitle{Inventory}
  Das Inventory sammelt die diversen Systeme und besteht aus einer oder mehreren
  Dateien:
  \begin{exampleblock}{hosts}
    \texttt{192.168.23.42}\\
    \texttt{clt.20.example.org}

    \texttt{[webservers]}\\
    \texttt{192.168.17.189}\\
    \texttt{clt.20.example.org}
  \end{exampleblock}
\end{frame}

\begin{frame}[fragile,t]
  \frametitle{Inventory}
  \framesubtitle{Format}
  Das Inventory kann im INI"=Format vorliegen \only<3>{oder als YAML"=Datei:}
  \only<2>{  \begin{exampleblock}{hosts als INI}
    \texttt{192.168.23.42}\\
    \texttt{clt.20.example.org}

    \texttt{[webservers]}\\
    \texttt{192.168.17.189}\\
    \texttt{clt.20.example.org}
  \end{exampleblock}}

\begin{onlyenv}<3>
  \begin{exampleblock}{hosts als YAML}
\begin{lstlisting}
all:
  hosts:
    192.168.23.42
    clt.20.example.org
  children:
    webservers:
      clt.20.example.org:
\end{lstlisting}
  \end{exampleblock}
\end{onlyenv}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Standardgruppen}
  Ansible legt standardmäßig zwei Gruppen an:
  \begin{itemize}
  \item<+-> \texttt{all}
  \item<+-> \texttt{ungrouped}
  \end{itemize}\pause{}

  Weitere Gruppen könnt ihr selbst festlegen und die Hosts dort oder in
  Kindgruppen einsortieren.
\end{frame}

\begin{frame}[fragile]
  \frametitle{Dynamische Inventorys}
  Die Inventorys sind nicht unbedingt statisch. Neue Host kommen hinzu, alte
  werden aus dem System genommen. Je nach Umgebung kann dies sehr dynamisch
  passieren.\pause{}

  Ansible setzt hier mittels Inventoryplugins oder -skripten an:
  \texttt{ansible-doc -t inventory -l}.

  Damit werden die Inventorys dynamisch aufgebaut und mit Ansible benutzt.
\end{frame}

\subsection{Hostvariablen}

\begin{frame}[fragile]
  \frametitle{Hostvariablen}

  Im Inventory können pro Host Variablen festgelegt werden. Diese können später
  wieder im Playbook verwendet werden.
    \begin{exampleblock}{hosts}
    \texttt{[webservers]}\\
    \texttt{192.168.17.189 http\_port=80}\\
    \texttt{clt.20.example.org http\_port=8080}
  \end{exampleblock}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Gruppenvariablen}
  Die Variablen können auch für Gruppen verwendet werden.
  \begin{exampleblock}{hosts}
    \texttt{[webservers]}\\
    \texttt{192.168.17.189}\\
    \texttt{clt.20.example.org}\\
    \texttt{[webservers:vars]}\\
    \texttt{ansible\_user=foo}\\
    \texttt{proxy=bar:3128}
  \end{exampleblock}
\end{frame}




\section{Rollen}

\begin{frame}[fragile]
  \frametitle{Rollen}
  \framesubtitle{Einführung}
  Irgendwann
  kommt der Punkt, wo die Arbeit besser organisiert werden soll. Denn in der
  Regel sollen viele kleine Aufgaben ausgeführt werden statt einer großen.

  Seit Ansible~2.4 gibt es die Möglichkeit, Inhalte anderer Dateien einzubinden
  (\texttt{import} und \texttt{include}).

  Rollen sind ein älteres Mittel. Diese greifen auf eine vordefinierte
  Verzeichnisstruktur zurück und können Tasks ausführen, auf Variablen zugreifen etc.
\end{frame}

\begin{frame}[fragile]
  \frametitle{Rollen}
  \framesubtitle{Verzeichnisstruktur}
  \begin{columns}
    \begin{column}{.5\textwidth}
      \begin{itemize}
      \item<+-> Mindestens eines der Verzeichnisse muss existieren
      \item<+-> Die existierenden Verzeichnisse müssen eine Datei mit dem Namen
        \texttt{main.yml} enthalten.
      \end{itemize}
    \end{column}
    \begin{column}{.5\textwidth}
      \tikzstyle{every node}=[draw=black,thick,anchor=west]
      \tikzstyle{selected}=[draw=green,fill=green!30]
      \begin{tikzpicture}[%
        grow via three points={one child at (0.5,-0.7) and two children at
          (0.5,-0.7) and (0.5,-1.4)}, edge from parent
        path={(\tikzparentnode.south) |- (\tikzchildnode.west)}]
        \node {/} child { node {roles} child { node [selected] {Rollenname}
            child { node {tasks}} child { node {handlers}} child { node {files}}
            child { node {templates}} child { node {vars}} child { node
              {defaults}} child { node {meta}} }} ;
      \end{tikzpicture}
    \end{column}
  \end{columns}
\end{frame}

\begin{frame}
  \frametitle{Rollen}
  \framesubtitle{Inhalt der Verzeichnisse}
  \begin{columns}
    \begin{column}{.5\textwidth}
      \begin{description}
      \item[tasks] enthalten die Liste an Tasks, die durch die Rolle ausgeführt
        wird
      \item[handlers] Handler, die durch die Rolle benutzt werden
      \item[files] Dateien, die von dieser Rolle benutzt werden
      \item[templates] Templates, die dann deployt werden
      \item[vars] Variablen für die Rolle
      \item[defaults] Standardwerte für Variablen
      \item[meta] Abhängigkeiten der Rolle
      \end{description}
    \end{column}
    \begin{column}{.5\textwidth}
      \tikzstyle{every node}=[draw=black,thick,anchor=west]
      \tikzstyle{selected}=[draw=green,fill=green!30]
      \begin{tikzpicture}[%
        grow via three points={one child at (0.5,-0.7) and two children at
          (0.5,-0.7) and (0.5,-1.4)}, edge from parent
        path={(\tikzparentnode.south) |- (\tikzchildnode.west)}]
        \node {/} child { node {roles} child { node [selected] {Rollenname}
            child { node {tasks}} child { node {handlers}} child { node {files}}
            child { node {templates}} child { node {vars}} child { node
              {defaults}} child { node {meta}} }} ;
      \end{tikzpicture}
    \end{column}
  \end{columns}
\end{frame}


\end{document}


